CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- ou uuid_generate_v4() se preferir
    user_id UUID NOT NULL,  -- referência para o usuário dono da categoria
    name TEXT NOT NULL,     -- nome da categoria
    description TEXT,       -- descrição opcional
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    
    CONSTRAINT fk_categories_user
        FOREIGN KEY(user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

CREATE TABLE expenses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,        -- usuário que registrou a despesa
    category_id UUID NOT NULL,    -- categoria associada à despesa
    name TEXT NOT NULL,           -- nome ou título da despesa
    description TEXT,             -- descrição detalhada (opcional)
    amount NUMERIC(12,2) NOT NULL,  -- valor da despesa; ajuste a precisão conforme necessário
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    
    CONSTRAINT fk_expenses_user
        FOREIGN KEY(user_id) REFERENCES auth.users(id) ON DELETE CASCADE,
    CONSTRAINT fk_expenses_category
        FOREIGN KEY(category_id) REFERENCES categories(id) ON DELETE SET NULL  -- ou CASCADE, conforme sua lógica de negócio
);

CREATE TABLE installments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    expense_id UUID NOT NULL,   -- referência à despesa original
    installment_number INT NOT NULL,  -- número da parcela (ex: 1, 2, 3, ...)
    due_date DATE NOT NULL,     -- data de vencimento da parcela
    amount NUMERIC(12,2) NOT NULL,  -- valor da parcela
    paid BOOLEAN NOT NULL DEFAULT false,  -- status de pagamento
    paid_at TIMESTAMPTZ,        -- data em que a parcela foi paga, se aplicável
    
    CONSTRAINT fk_installments_expense
        FOREIGN KEY(expense_id) REFERENCES expenses(id) ON DELETE CASCADE
);

CREATE TYPE movement_type AS ENUM ('income', 'expense');

ALTER TABLE categories
  ADD COLUMN type movement_type NOT NULL DEFAULT 'expense';

ALTER TABLE expenses
  ADD COLUMN type movement_type NOT NULL DEFAULT 'expense';

CREATE TABLE pluggy_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    pluggy_item_id UUID NOT NULL UNIQUE,          -- ID retornado pelo Pluggy
    connector_id INT NOT NULL,                    -- ex.: 612 (Nubank Open Finance)
    connector_name TEXT NOT NULL,
    status TEXT NOT NULL,
    execution_status TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    last_sync TIMESTAMPTZ,
    next_sync TIMESTAMPTZ,
    consent_expires_at TIMESTAMPTZ,
    error_code TEXT
);

CREATE INDEX idx_pluggy_items_user ON pluggy_items(user_id);

ALTER TABLE installments
ADD COLUMN pluggy_transaction_id UUID UNIQUE;

CREATE INDEX idx_installments_pluggy_tx ON installments(pluggy_transaction_id);

ALTER TABLE expenses
ADD COLUMN pluggy_installments_reference TEXT;


BEGIN;

-- 1) Derruba a antiga
DROP VIEW IF EXISTS public.installments_extended;

-- 2) Recria com as colunas que você precisa
CREATE VIEW public.installments_extended AS
SELECT
  -- i.* explicitado para evitar surpresas
  i.id,
  i.expense_id,
  i.installment_number,
  i.due_date,
  i.amount,
  i.paid,
  i.paid_at,

  -- mesmas colunas que já existiam na view antiga
  e.user_id,
  to_jsonb(e)                            AS expense,
  COUNT(i.id) OVER (PARTITION BY i.expense_id) AS total_installments,
  SUM(i.amount) OVER (PARTITION BY i.expense_id) AS total_purchase_amount,
  CASE WHEN COUNT(i.id) OVER (PARTITION BY i.expense_id) = 1
       THEN 'single' ELSE 'multi' END    AS installment_type,
  e.type,

  -- NOVAS colunas expostas para filtro/uso no front
  e.category_id,
  e.name                                 AS expense_name,
  e.description                          AS expense_description,
  e.created_at                           AS expense_created_at

FROM installments i
JOIN expenses e ON i.expense_id = e.id;

-- (Opcional) re-grants, se você usa políticas/grants específicos no Supabase:
-- GRANT SELECT ON public.installments_extended TO anon, authenticated;

COMMIT;